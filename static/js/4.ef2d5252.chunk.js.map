{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","key","className","classes","Ingredient","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","connect","state","error","auth","dispatch","actions","ErrorHandler"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,4B,gHCoC7CC,EAhCD,SAACC,GACb,IAAMC,EAAc,GACpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC/BA,EAAYE,KAAK,CACfC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAI9B,IAAMI,EAAmBL,EAAYM,KAAI,SAACC,GACxC,OACE,0BAAMC,IAAKD,EAAGJ,KAAMM,UAAWC,IAAQC,YACpCJ,EAAGJ,KADN,KACcI,EAAGH,OADjB,QAMJ,OACE,yBAAKK,UAAWC,IAAQZ,OACtB,2CAAiBO,GACjB,qCACS,gCAASO,OAAOC,WAAWd,EAAMe,OAAOC,QAAQ,O,uBClBzDC,E,kLAEFC,KAAKlB,MAAMmB,cAAcD,KAAKlB,MAAMoB,MAAOF,KAAKlB,MAAMqB,U,+BAItD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MAiBb,OAhBKL,KAAKlB,MAAMwB,UACdF,EACE,6BACGJ,KAAKlB,MAAMsB,OAAOf,KAAI,SAACkB,GACtB,OACE,kBAAC,EAAD,CACEhB,IAAKgB,EAAMC,GACXzB,YAAawB,EAAMxB,YACnBc,MAAOU,EAAMV,aAQlBO,M,GAvBUK,aA4CNC,uBAjBS,SAACC,GACvB,MAAO,CACLP,OAAQO,EAAMJ,MAAMH,OACpBE,QAASK,EAAMJ,MAAMD,QACrBM,MAAOD,EAAMJ,MAAMK,MACnBV,MAAOS,EAAME,KAAKX,MAClBC,OAAQQ,EAAME,KAAKV,WAII,SAACW,GAC1B,MAAO,CACLb,cAAe,SAACC,EAAOC,GAAR,OACbW,EAASC,IAAoBb,EAAOC,QAI3BO,CAGbM,YAAajB","file":"static/js/4.ef2d5252.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2npre\",\"Ingredient\":\"Order_Ingredient__3FBaq\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classes from \"./Order.module.css\";\r\n\r\nconst Order = (props) => {\r\n  const ingredients = [];\r\n  for (let ingredientName in props.ingredients) {\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      amount: props.ingredients[ingredientName],\r\n    });\r\n  }\r\n\r\n  const ingredientOutput = ingredients.map((ig) => {\r\n    return (\r\n      <span key={ig.name} className={classes.Ingredient}>\r\n        {ig.name} ({ig.amount})\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients: {ingredientOutput}</p>\r\n      <p>\r\n        Price: <strong>{Number.parseFloat(props.price).toFixed(2)}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nOrder.propTypes = {\r\n  ingredients: PropTypes.object,\r\n  price: PropTypes.number,\r\n};\r\n\r\nexport default Order;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Order from \"../../components/Order/Order\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport ErrorHandler from \"../../hoc/ErrorHandler/ErrorHandler\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nclass Orders extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n  }\r\n\r\n  render() {\r\n    let orders = <Spinner />;\r\n    if (!this.props.loading) {\r\n      orders = (\r\n        <div>\r\n          {this.props.orders.map((order) => {\r\n            return (\r\n              <Order\r\n                key={order.id}\r\n                ingredients={order.ingredients}\r\n                price={order.price}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return orders;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    error: state.order.error,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token, userId) =>\r\n      dispatch(actions.fetchOrders(token, userId)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ErrorHandler(Orders));\r\n"],"sourceRoot":""}