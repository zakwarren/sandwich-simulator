{"version":3,"sources":["containers/Checkout/Checkout.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","CheckoutSummary","props","className","classes","Sandwich","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","message","required","valid","touched","email","isEmail","street","postCode","minLength","maxLength","country","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","formData","formElement","order","getIngredientCounts","ings","price","orderData","userId","onOrder","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputId","setState","formElements","key","this","push","id","config","form","onSubmit","map","Input","shouldValidate","invalid","errorMessage","changed","disabled","Spinner","Component","connect","sandwichSimulator","totalPrice","error","auth","dispatch","actions","ErrorHandler","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","ingCounts","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.d521b94b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"Checkout_Checkout__3qQga\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__HiZsT\",\"Sandwich\":\"CheckoutSummary_Sandwich__3wVMT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1-Rcq\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classes from \"./CheckoutSummary.module.css\";\r\nimport Sandwich from \"../../Sandwich/Sandwich\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>\r\n        Clamp your pearly whites around this hasty, limp sandwich filled with\r\n        MSG and your choice of ingredients!\r\n      </h1>\r\n      <div className={classes.Sandwich}>\r\n        <Sandwich ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        Cancel\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCheckoutSummary.propTypes = {\r\n  ingredients: PropTypes.object.isRequired,\r\n  checkoutCancelled: PropTypes.func.isRequired,\r\n  checkoutContinued: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./ContactData.module.css\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport {\r\n  getIngredientCounts,\r\n  updateObject,\r\n  checkValidity,\r\n} from \"../../../utils/utilities\";\r\nimport ErrorHandler from \"../../../hoc/ErrorHandler/ErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          message: \"Please enter your name\",\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          message: \"Please enter a valid email\",\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          message: \"Please enter a street\",\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      postCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Post Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          message: \"Please enter a valid post code\",\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 8,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          message: \"Please enter a country\",\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    loading: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElement in this.state.orderForm) {\r\n      formData[formElement] = this.state.orderForm[formElement].value;\r\n    }\r\n    const ingredients = getIngredientCounts(this.props.ings);\r\n    const order = {\r\n      ingredients: ingredients,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrder(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputId in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({\r\n      orderForm: updatedOrderForm,\r\n      formIsValid: formIsValid,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your contact details</h4>\r\n        <form onSubmit={this.orderHandler}>\r\n          {formElements.map((formElement) => (\r\n            <Input\r\n              key={formElement.id}\r\n              elementType={formElement.config.elementType}\r\n              elementConfig={formElement.config.elementConfig}\r\n              value={formElement.config.value}\r\n              touched={formElement.config.touched}\r\n              shouldValidate={formElement.config.validation}\r\n              invalid={!formElement.config.valid}\r\n              errorMessage={\r\n                formElement.config.validation\r\n                  ? formElement.config.validation.message\r\n                  : null\r\n              }\r\n              changed={(event) =>\r\n                this.inputChangedHandler(event, formElement.id)\r\n              }\r\n            />\r\n          ))}\r\n          <Button\r\n            btnType=\"Success\"\r\n            clicked={this.orderHandler}\r\n            disabled={!this.state.formIsValid}\r\n          >\r\n            Order\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    return form;\r\n  }\r\n}\r\n\r\nContactData.propTypes = {\r\n  ings: PropTypes.array.isRequired,\r\n  price: PropTypes.number.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.object,\r\n  token: PropTypes.string.isRequired,\r\n  userId: PropTypes.string.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.sandwichSimulator.ingredients,\r\n    price: state.sandwichSimulator.totalPrice,\r\n    loading: state.order.loading,\r\n    error: state.order.error,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrder: (orderData, token) =>\r\n      dispatch(actions.purchaseSandwich(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ErrorHandler(ContactData));\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./Checkout.module.css\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { getIngredientCounts } from \"../../utils/utilities\";\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    const ingCounts = getIngredientCounts(this.props.ings);\r\n\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div className={classes.Checkout}>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={ingCounts}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nCheckout.propTypes = {\r\n  history: PropTypes.object.isRequired,\r\n  match: PropTypes.object.isRequired,\r\n  ings: PropTypes.array,\r\n  purchased: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.sandwichSimulator.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}