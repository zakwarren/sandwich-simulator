{"version":3,"sources":["containers/Checkout/Checkout.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","CheckoutSummary","props","className","classes","Sandwich","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","sandwichSimulator","price","totalPrice","loading","order","error","token","auth","userId","dispatch","onOrder","orderData","actions","ErrorHandler","useState","name","elementType","elementConfig","type","placeholder","value","validation","message","required","valid","touched","email","isEmail","street","postCode","minLength","maxLength","country","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","canHaveNotifications","setCanHaveNotification","useEffect","window","navigator","displayConfirmNotification","body","data","url","badge","icon","image","dir","lang","vibrate","tag","renotify","action","title","serviceWorker","ready","then","swreg","showNotification","orderHandler","event","preventDefault","Notification","requestPermission","result","formData","formElement","getIngredientCounts","formElements","key","push","id","config","form","ContactData","onSubmit","map","Input","shouldValidate","invalid","errorMessage","changed","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","updatedFormIsValid","inputId","inputChangedHandler","disabled","Spinner","purchased","ingCounts","summary","to","purchasedRedirect","Checkout","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.7da9e7ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"Checkout_Checkout__3qQga\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__HiZsT\",\"Sandwich\":\"CheckoutSummary_Sandwich__3wVMT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1-Rcq\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classes from \"./CheckoutSummary.module.css\";\r\nimport Sandwich from \"../../Sandwich/Sandwich\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>\r\n        Clamp your pearly whites around this hasty, limp sandwich filled with\r\n        MSG and your choice of ingredients!\r\n      </h1>\r\n      <div className={classes.Sandwich}>\r\n        <Sandwich ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        Cancel\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCheckoutSummary.propTypes = {\r\n  ingredients: PropTypes.object.isRequired,\r\n  checkoutCancelled: PropTypes.func.isRequired,\r\n  checkoutContinued: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./ContactData.module.css\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport {\r\n  getIngredientCounts,\r\n  updateObject,\r\n  checkValidity,\r\n} from \"../../../utils/utilities\";\r\nimport ErrorHandler from \"../../../hoc/ErrorHandler/ErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nconst ContactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Name\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        message: \"Please enter your name\",\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Your Email\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        message: \"Please enter a valid email\",\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Street\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        message: \"Please enter a street\",\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    postCode: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Post Code\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        message: \"Please enter a valid post code\",\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 8,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Country\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        message: \"Please enter a country\",\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: \"select\",\r\n      elementConfig: {\r\n        options: [\r\n          { value: \"fastest\", displayValue: \"Fastest\" },\r\n          { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n        ],\r\n      },\r\n      value: \"fastest\",\r\n      validation: {},\r\n      valid: true,\r\n    },\r\n  });\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n  const [canHaveNotifications, setCanHaveNotification] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (\"Notification\" in window && \"serviceWorker\" in navigator) {\r\n      setCanHaveNotification(true);\r\n    }\r\n  }, []);\r\n\r\n  const askForNotificationPermission = () => {\r\n    Notification.requestPermission().then((result) => {\r\n      if (result === \"granted\") {\r\n        displayConfirmNotification();\r\n      }\r\n    });\r\n  };\r\n\r\n  const displayConfirmNotification = () => {\r\n    if (\"serviceWorker\" in navigator) {\r\n      const options = {\r\n        body: \"Thank you for your order. Your sandwich will be prepared soon.\",\r\n        data: { url: \"http://localhost:3000/sandwich-simulator/\" },\r\n        badge: \"/sandwich-simulator/logo192.png\",\r\n        icon: \"/sandwich-simulator/logo192.png\",\r\n        image: \"/sandwich-simulator/logo512.png\",\r\n        dir: \"ltr\",\r\n        lang: \"en-GB\",\r\n        vibrate: [100, 50, 200],\r\n        tag: \"confirm-notification\",\r\n        renotify: true,\r\n        actions: [\r\n          { action: \"confirm\", title: \"OK\" },\r\n          { action: \"cancel\", title: \"Cancel\" },\r\n        ],\r\n      };\r\n      navigator.serviceWorker.ready.then((swreg) => {\r\n        swreg.showNotification(\"Sandwich ordered!\", options);\r\n      });\r\n    }\r\n  };\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    askForNotificationPermission();\r\n\r\n    const formData = {};\r\n    for (let formElement in orderForm) {\r\n      formData[formElement] = orderForm[formElement].value;\r\n    }\r\n    const ingredients = getIngredientCounts(props.ings);\r\n    const order = {\r\n      ingredients: ingredients,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrder(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        orderForm[inputIdentifier].validation\r\n      ),\r\n      touched: true,\r\n    });\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let updatedFormIsValid = true;\r\n    for (let inputId in updatedOrderForm) {\r\n      updatedFormIsValid =\r\n        updatedOrderForm[inputId].valid && updatedFormIsValid;\r\n    }\r\n\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(updatedFormIsValid);\r\n  };\r\n\r\n  const formElements = [];\r\n  for (let key in orderForm) {\r\n    formElements.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n\r\n  let form = (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your contact details</h4>\r\n      <form onSubmit={orderHandler}>\r\n        {formElements.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            touched={formElement.config.touched}\r\n            shouldValidate={formElement.config.validation}\r\n            invalid={!formElement.config.valid}\r\n            errorMessage={\r\n              formElement.config.validation\r\n                ? formElement.config.validation.message\r\n                : null\r\n            }\r\n            changed={(event) => inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button\r\n          btnType=\"Success\"\r\n          clicked={orderHandler}\r\n          disabled={!formIsValid}\r\n        >\r\n          Order\r\n        </Button>\r\n        {canHaveNotifications ? (\r\n          <p>Please accept notifications to receive updates about your order</p>\r\n        ) : null}\r\n      </form>\r\n    </div>\r\n  );\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  return form;\r\n};\r\n\r\nContactData.propTypes = {\r\n  ings: PropTypes.array.isRequired,\r\n  price: PropTypes.number.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.object,\r\n  token: PropTypes.string.isRequired,\r\n  userId: PropTypes.string.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.sandwichSimulator.ingredients,\r\n    price: state.sandwichSimulator.totalPrice,\r\n    loading: state.order.loading,\r\n    error: state.order.error,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrder: (orderData, token) =>\r\n      dispatch(actions.purchaseSandwich(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ErrorHandler(ContactData));\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./Checkout.module.css\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { getIngredientCounts } from \"../../utils/utilities\";\r\n\r\nconst Checkout = (props) => {\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  const ingCounts = getIngredientCounts(props.ings);\r\n\r\n  let summary = <Redirect to=\"/\" />;\r\n  if (props.ings) {\r\n    const purchasedRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\r\n    summary = (\r\n      <div className={classes.Checkout}>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={ingCounts}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n        />\r\n        <Route\r\n          path={props.match.path + \"/contact-data\"}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return summary;\r\n};\r\n\r\nCheckout.propTypes = {\r\n  history: PropTypes.object.isRequired,\r\n  match: PropTypes.object.isRequired,\r\n  ings: PropTypes.array,\r\n  purchased: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.sandwichSimulator.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}